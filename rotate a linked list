public class RotateLinkedList {

    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || k == 0) {
            return head;
        }


        int length = 1;  
        ListNode current = head;
        while (current.next != null) {
            current = current.next;
            length++;
        }


        k = k % length;
        if (k == 0) {
            return head;
        }

        
        int stepsToMove = length - k - 1;
        current = head;
        while (stepsToMove > 0) {
            current = current.next;
            stepsToMove--;
        }

   

        
        current = newHead;
        while (current.next != null) {
            current = current.next;
        }
        current.next = head;

        return newHead;
    }


    public void printList(ListNode node) {
        while (node != null) {
            System.out.print(node.val + " ");
            node = node.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        RotateLinkedList solution = new RotateLinkedList();
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        System.out.println("Original list:");
        solution.printList(head);

        int k = 2;
        ListNode rotatedHead = solution.rotateRight(head, k);

        System.out.println("List rotated by " + k + " nodes:");
        solution.printList(rotatedHead);
    }
}
